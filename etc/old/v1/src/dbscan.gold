#!/usr/bin/env ../gold
# vim: filetype=awk nospell ts=2 sw=2 sts=2  et :

@include "lib/gold.awk"
@include "lib/ksort.awk"
@include "lib/csv.awk"
@include "lib/o.awk"
@include "lib/cat.awk"
@include "num.gold"

function DbScan(i) {
  i.clusterColumn=""
  has(i,"clusters")
  has(i,"rows")
  has(i,"poles")
  has(i,"cells")
  has(i,"densities","Num")
}
function Row(i,cluster0) {
  i.cluster0=cluster0
  has(i,"pole")
  has(i,"cell")
}
function dbscanMain(f,db,    a,n,i) {
  DbScan(db)
  while(csv(a,f)) 
    if (length(db.poles))
      Row1(db,a)
    else
      Row0(db,a) ;
  n=ksort(db.clusters,"n")
  for(i in db.clusters)
    add(db.densities, db.clusters[i].n)
  print(NumSmall(db.densities))
  #for(i=n;i>=1;i--) 
   # scan(i,db.clusters, db.clusters[i])
}
function scan(i,all,one) {
  if (one.id) return
  one.id = i
  for(j=i+1;j>=length(all);j--) 
    if (ClusterDistaance(one,all[j])==1)
      return 1
}  
function Row0(db,a,     get,putPole,putCell) {
  for(get in a) {
    if (a[get] ~/%poles/)
       db.clusterColumn = get
    else if (a[get] ~ /%pole/)
      db.poles[++putPole] = get 
    else
      db.cells[++putCell] = get;
  }
}
function Row1(db,a,  r,cl,get,put) {
  cl = a[db.clusterColumn] # which cluster
  r = length(db.rows)+1
  hass(db.rows,r, "Row",cl)
  if (! (cl in db.clusters)) 
     hassss(db.clusters,cl,"Cluster",cl,db.poles,a)
  ClusterAdd(db.clusters[cl],r)
  _add(db.rows[r], db.poles,"pole",a)
  _add(db.rows[r], db.cells,"cell",a)
}
function _add(i,puts,slot,a,   put,get) {
  for(put in puts) {
    get = puts[put]
    i[slot][put] = a[get] }
}
function Cluster(i,tag,poles,a,    put,get) {
  i.tag=tag
  i.id=""
  has(i,"rows")
  has(i,"pole")
  i.bins=1
  i.n=0
  _add(i,poles,"pole",a)
}
function ClusterAdd(i,row) {
  i.rows[ length(i.rows)+1 ] = row
  i.n++
}
function ClusterDensity(i) { return i.n/i.bins }

function ClusterDistance(i,j,  p,d) {
  for(p in i.pole) 
    if(i.pole[p] != j.pole[p])
      d++
  return d
}
function distances(db,c1,c2,  d,num,n1,n2) {
   Num(num)
   for(c1 in db.clusters)  {
     n1=ClusterDensity(db.clusters[c1])
     for(c2 in db.clusters)  {
       n2=ClusterDensity(db.clusters[c2])
       if(c2> c1) {
         d= ClusterDistance(db.clusters[c1],
                            db.clusters[c2])
         if (d<2) 
          print n1,n2,d     
         add(num,d)
  }}}
  o(num)
  print NumSmall(num)
  
}
